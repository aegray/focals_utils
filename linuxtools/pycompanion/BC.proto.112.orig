
syntax = "proto2";

package focals;


        
        message LaunchableExperiences {
            repeated Experience experiences = 1;
        
        }
        
        
        message Handshake {
            required uint32 protocolMajorVersion = 1;
            required uint32 protocolMinorVersion = 2;
        
        }
        
        
        message ProductMetadataRequest {
            required string serviceName = 1;
        
        }
        
        
        message BlackCoralTemplatedSettings {
            optional GetSettings getSettings = 2;
            optional SetSettings setSettings = 1;
        
        }
        
        
        message StartShowcase {
        
        }
        
        
        message AuthorizeResponse {
            required Result result = 2;
            required string serviceName = 1;
        
                
                enum Result {
                    SUCCESS = 0;
                    FAILURE = 1;
                }
                
        }
        
        
        message RegisteringMetadata {
            required uint32 percentComplete = 1;
        
        }
        
        
        message CaptureLogs {
            optional string reportId = 1;
        
        }
        
        
        message ExitPupilSelectionRejected {
        
        }
        
        
        message IntentionalReboot {
            required Reason reason = 1;
        
                
                enum Reason {
                    USER_RESET = 0;
                    SOFTWARE_UPDATE = 1;
                    FEATURE_CHANGE = 2;
                }
                
        }
        
        
        message Companion {
            optional CompanionActivity activity = 31;
            optional AncsDeviceStatus ancsStatus = 23;
            optional AppAttributes appAttributes = 9;
            optional BatteryState batteryState = 12;
            optional CompanionCamera camera = 39;
            optional CompanionClipboard clipboard = 36;
            optional DismissNotification dismissNotification = 6;
            optional CompanionExitPupilAlignment exitPupilAlignment = 22;
            optional CompanionExternalAuthorization externalAuthorization = 27;
            optional FactoryResetResponse factoryResetResponse = 18;
            optional CompanionFavouriteContacts favouriteContacts = 33;
            optional CompanionFeatures features = 26;
            optional CompanionFileTransfer fileTransfer = 16;
            optional GetHostByName getHostByName = 10;
            optional HandshakeResponse handshakeResponse = 1;
            optional InputDevicePairingStatusChanged inputDevicePairingStatusChanged = 7;
            optional InputDeviceStatus inputDeviceStatus = 8;
            optional IntentionalReboot intentionalReboot = 34;
            optional LaunchableExperiences launchableExperiences = 15;
            optional CompanionLocation location = 21;
            optional CompanionLocationSharingControl locationSharingControl = 28;
            optional CompanionNavigation navigation = 30;
            optional CompanionNoteTaker noteTaker = 37;
            optional CompanionNotification notification = 29;
            optional Poke poke = 20;
            optional RefreshAuthToken refreshAuthToken = 14;
            optional Screenshot screenshot = 32;
            optional SendSms sendSms = 24;
            optional CompanionShowcase showcase = 38;
            optional CompanionSms sms = 25;
            optional SocketClose socketClose = 3;
            optional SocketDataChunk socketDataChunk = 4;
            optional SocketError socketError = 11;
            optional SocketOpen socketOpen = 2;
            optional CompanionSync sync = 19;
            optional CompanionTemplatedSettings templatedSettings = 35;
            optional CompanionUpdate update = 17;
        
        }
        
        
        message UpdateStatus {
            required string fileId = 1;
            required Status status = 2;
        
                
                enum Status {
                    READY = 0;
                    STARTING = 1;
                    ERROR = 2;
                    CANCELLED = 3;
                }
                
        }
        
        
        message GetFeatureListResponse {
            repeated FeatureDefinition featureDefinition = 1;
        
        }
        
        
        enum exitpupilalignment_Step {
            exitpupilalignment_Step_INTRO = 0;
            exitpupilalignment_Step_SIZING_CHECK = 1;
            exitpupilalignment_Step_TASK_INTRO = 2;
            exitpupilalignment_Step_TASK = 3;
        }
        
        
        message RemoteInput {
            required bool allowsFreeForm = 2;
            required string key = 1;
            required string label = 3;
            repeated string smartChoices = 4;
        
        }
        
        
        message BlackCoralFeatures {
            optional GetFeatureList featureList = 1;
            optional SetEnabledFeatures setEnabledFeatures = 2;
        
        }
        
        
        message RemoveFavouriteContact {
            required string id = 1;
        
        }
        
        
        message ActivityStateChanged {
            required Activity activity = 1;
        
                
                enum Activity {
                    UNKNOWN = 0;
                    STILL = 1;
                    WALKING = 2;
                    RUNNING = 3;
                    BICYCLE = 4;
                    VEHICLE = 5;
                }
                
        }
        
        
        message FavouriteContact {
            required string id = 1;
            required string name = 2;
            required string phone = 3;
        
        }
        
        
        message GetSettingsResponse {
            required string json = 1;
        
        }
        
        
        message CancelUpdate {
        
        }
        
        
        message SendSmsResponse {
            optional string contextId = 2;
            required Result result = 1;
        
                
                enum Result {
                    SUCCESS = 0;
                    FAILURE = 1;
                }
                
        }
        
        
        message SwitchToExitPupil {
            required ExitPupil ep = 1;
        
                
                enum ExitPupil {
                    EP1 = 0;
                    EP2 = 1;
                    EP3 = 2;
                    EP4 = 3;
                }
                
        }
        
        
        message CompanionTemplatedSettings {
            optional GetSettingsResponse getSettingsResponse = 1;
            optional SetSettingsResponse setSettingsResponse = 2;
        
        }
        
        
        message NavigationStatusUpdate {
            optional Arrived arrived = 2;
            optional NavigationError navigationError = 1;
            optional RerouteStatus rerouteStatusUpdate = 7;
            optional RouteLeg routeLegProgress = 5;
            optional StatusResponse statusResponse = 3;
            optional Status statusUpdate = 4;
            optional StatusUpdateResponse statusUpdateResponse = 6;
        
                
                message Arrived {
                
                }
                
                
                enum NavigationError {
                    OTHER = 0;
                    GPS_LOST = 1;
                    REROUTING_FAILED = 2;
                    LOGOUT = 3;
                }
                
                
                message RerouteStatus {
                    required RerouteStatus status = 1;
                
                        
                        enum Reroute {
                            REROUTE_STARTED = 0;
                            REROUTE_SUCCEEDED = 1;
                        }
                        
                }
                
                
                message RouteLeg {
                    required RouteStep currentStep = 1;
                    required int32 distanceRemaining = 5;
                    required bool hasManeuverVoiceData = 4;
                    optional string instructionText = 6;
                    required TripEstimate tripEstimate = 3;
                    optional RouteStep upcomingStep = 2;
                
                }
                
                
                message RouteStep {
                    optional RouteStep drivingSide = 4;
                    optional double exitAngle = 8;
                    optional uint32 exitIndex = 6;
                    repeated string exitNames = 7;
                    optional RouteStep laneIndication = 5;
                    required RouteStep maneuverDirection = 2;
                    required RouteStep maneuverType = 1;
                    required string streetName = 3;
                
                        
                        enum DrivingSide {
                            DRIVINGSIDE_LEFT = 0;
                            DRIVINGSIDE_RIGHT = 1;
                        }
                        
                        
                        enum LaneIndication {
                            LANEINDICATION_SHARP_RIGHT = 0;
                            LANEINDICATION_RIGHT = 1;
                            LANEINDICATION_SLIGHT_RIGHT = 2;
                            LANEINDICATION_STRAIGHT_AHEAD = 3;
                            LANEINDICATION_SLIGHT_LEFT = 4;
                            LANEINDICATION_LEFT = 5;
                            LANEINDICATION_SHARP_LEFT = 6;
                            LANEINDICATION_UTURN = 7;
                        }
                        
                        
                        enum ManeuverDirection {
                            DIRECTION_NONE = 0;
                            DIRECTION_SHARP_RIGHT = 1;
                            DIRECTION_RIGHT = 2;
                            DIRECTION_SLIGHT_RIGHT = 3;
                            DIRECTION_STRAIGHT_AHEAD = 4;
                            DIRECTION_SLIGHT_LEFT = 5;
                            DIRECTION_LEFT = 6;
                            DIRECTION_SHARP_LEFT = 7;
                            DIRECTION_UTURN = 8;
                        }
                        
                        
                        enum ManeuverType {
                            TYPE_NONE = 0;
                            TYPE_DEPART = 1;
                            TYPE_TURN = 2;
                            TYPE_CONTINUE = 3;
                            TYPE_PASS_NAME_CHANGE = 4;
                            TYPE_MERGE = 5;
                            TYPE_TAKE_ON_RAMP = 6;
                            TYPE_TAKE_OFF_RAMP = 7;
                            TYPE_REACH_FORK = 8;
                            TYPE_REACH_END = 9;
                            TYPE_USE_LANE = 10;
                            TYPE_TAKE_ROUNDABOUT = 11;
                            TYPE_TAKE_ROTARY = 12;
                            TYPE_TURN_AT_ROUNDABOUT = 13;
                            TYPE_EXIT_ROUNDABOUT = 14;
                            TYPE_EXIT_ROTARY = 15;
                            TYPE_HEED_WARNING = 16;
                            TYPE_ARRIVE = 17;
                            TYPE_PASSWAYPOINT = 18;
                        }
                        
                }
                
                
                message Status {
                    required int32 distanceToManeuver = 4;
                    optional Status drivingSide = 8;
                    required bool hasManeuverVoiceData = 6;
                    optional Status laneIndication = 9;
                    required Status maneuverDirection = 2;
                    optional string maneuverText = 7;
                    required Status maneuverType = 1;
                    required TripEstimate tripEstimate = 5;
                    required string upcomingStreetName = 3;
                
                        
                        enum DrivingSide {
                            DRIVINGSIDE_LEFT = 0;
                            DRIVINGSIDE_RIGHT = 1;
                        }
                        
                        
                        enum LaneIndication {
                            LANEINDICATION_SHARP_RIGHT = 0;
                            LANEINDICATION_RIGHT = 1;
                            LANEINDICATION_SLIGHT_RIGHT = 2;
                            LANEINDICATION_STRAIGHT_AHEAD = 3;
                            LANEINDICATION_SLIGHT_LEFT = 4;
                            LANEINDICATION_LEFT = 5;
                            LANEINDICATION_SHARP_LEFT = 6;
                            LANEINDICATION_UTURN = 7;
                        }
                        
                        
                        enum ManeuverDirection {
                            DIRECTION_NONE = 0;
                            DIRECTION_SHARP_RIGHT = 1;
                            DIRECTION_RIGHT = 2;
                            DIRECTION_SLIGHT_RIGHT = 3;
                            DIRECTION_STRAIGHT_AHEAD = 4;
                            DIRECTION_SLIGHT_LEFT = 5;
                            DIRECTION_LEFT = 6;
                            DIRECTION_SHARP_LEFT = 7;
                            DIRECTION_UTURN = 8;
                        }
                        
                        
                        enum ManeuverType {
                            TYPE_NONE = 0;
                            TYPE_DEPART = 1;
                            TYPE_TURN = 2;
                            TYPE_CONTINUE = 3;
                            TYPE_PASS_NAME_CHANGE = 4;
                            TYPE_MERGE = 5;
                            TYPE_TAKE_ON_RAMP = 6;
                            TYPE_TAKE_OFF_RAMP = 7;
                            TYPE_REACH_FORK = 8;
                            TYPE_REACH_END = 9;
                            TYPE_USE_LANE = 10;
                            TYPE_TAKE_ROUNDABOUT = 11;
                            TYPE_TAKE_ROTARY = 12;
                            TYPE_TURN_AT_ROUNDABOUT = 13;
                            TYPE_EXIT_ROUNDABOUT = 14;
                            TYPE_EXIT_ROTARY = 15;
                            TYPE_HEED_WARNING = 16;
                            TYPE_ARRIVE = 17;
                            TYPE_PASSWAYPOINT = 18;
                        }
                        
                }
                
                
                message StatusResponse {
                    optional string contextId = 2;
                    required Status status = 1;
                
                }
                
                
                message StatusUpdateResponse {
                    optional string contextId = 2;
                    required RouteLeg routeLegProgress = 1;
                
                }
                
        }
        
        
        message CompanionLocation {
            optional GetLocation getLocation = 1;
            optional SubscribeLocationUpdates subscribe = 2;
            optional UnsubscribeLocationUpdates unsubscribe = 3;
        
        }
        
        
        message Account {
            optional string accountId = 1;
        
        }
        
        
        message Task {
            optional string completionTime = 4;
            required string creationTime = 3;
            required string id = 1;
            required string text = 2;
        
        }
        
        
        message SocketError {
            required int32 errorCode = 2;
            required int32 streamId = 1;
        
        }
        
        
        message GetFavouriteContactsListResponse {
            repeated FavouriteContact favouriteContacts = 1;
            required int32 favouriteLimit = 2;
        
        }
        
        
        message AcceptExitPupilAlignment {
        
        }
        
        
        message EnableAllExitPupils {
        
        }
        
        
        message AppNotificationBlacklist {
            repeated string appIdentifiers = 1;
        
        }
        
        
        message FileChunkResponse {
            required string id = 1;
            required uint32 startByte = 3;
            required filetransfer_Status status = 2;
        
        }
        
        
        message CaptureScreenshot {
            optional string fileformat = 1;
            optional bool silent = 2;
        
        }
        
        
        message StopStory {
        
        }
        
        
        message GetStoriesResponse {
            required string json = 1;
        
        }
        
        
        message Position {
            required double latitude = 1;
            required double longitude = 2;
        
        }
        
        
        message AdjustExitPupilAlignment {
            required float coarseFactor = 2;
            required exitpupilalignment_Direction direction = 1;
        
        }
        
        
        enum filetransfer_Status {
            filetransfer_Status_OK = 0;
            filetransfer_Status_INVALID_REQUEST = 1;
            filetransfer_Status_ERROR = 2;
        }
        
        
        message CompanionNotification {
            optional AddToAppNotificationBlacklist addToAppNotificationBlacklist = 1;
            optional PerformNotificationAction performNotificationAction = 2;
        
        }
        
        
        message ClipText {
            required string text = 1;
        
        }
        
        
        message ContactInfo {
            required string name = 1;
            required string phoneNumber = 2;
        
        }
        
        
        message ActivityState {
            required Activity activity = 1;
            required uint32 confidence = 2;
            required string startDate = 3;
        
                
                enum Activity {
                    UNKNOWN = 0;
                    STILL = 1;
                    WALKING = 2;
                    RUNNING = 3;
                    BICYCLE = 4;
                    VEHICLE = 5;
                }
                
        }
        
        
        message DismissNotification {
            required string identifier = 1;
        
        }
        
        
        message SetSettingsResponse {
            optional bool error = 1;
        
        }
        
        
        message EstimateNavigationResponse {
            optional string contextId = 2;
            required EstimateNavigationResponseData data = 1;
        
        }
        
        
        message RefreshServiceAccessToken {
            required string serviceName = 1;
        
        }
        
        
        message CompanionShowcase {
            optional GetStoriesResponse getStoriesResponse = 1;
            optional StoryStatus storyStatus = 2;
        
        }
        
        
        message NotificationDisplay {
            required DisplayLevel level = 1;
        
                
                enum DisplayLevel {
                    REDUCED = 0;
                    FULL = 1;
                    AUDIO = 2;
                }
                
        }
        
        
        message AncsDeviceStatus {
            required AncsStatus status = 1;
        
                
                enum AncsStatus {
                    LISTENING = 0;
                    ENUMERATING = 1;
                    PAIRING = 2;
                    PAIRING_COMPLETE = 3;
                    REGISTERING = 4;
                    CONNECTED = 5;
                }
                
        }
        
        
        message BlackCoral {
            optional BlackCoralActivity activity = 43;
            optional AppNotificationFilter appNotificationFilter = 13;
            optional Calendar calendar = 33;
            optional CalibrateEyeTracking calibrateEyeTracking = 9;
            optional CancelInputDevicePairing cancelInputDevicePairing = 11;
            optional CaptureLogs captureLogs = 32;
            optional CaptureScreenshot captureScreenshot = 44;
            optional CurrentTime currentTime = 8;
            optional DismissNotification dismissNotification = 16;
            optional BlackCoralExitPupilAlignment exitPupilAlignment = 35;
            optional BlackCoralExternalAuthorization externalAuthorization = 40;
            optional FactoryReset factoryReset = 31;
            optional BlackCoralFavouriteContacts favouriteContacts = 45;
            optional BlackCoralFeatures features = 39;
            optional BlackCoralFileTransfer fileTransfer = 29;
            optional GetHostByNameResponse getHostByNameResponse = 18;
            optional Handshake handshake = 1;
            optional BlackCoralLocation location = 34;
            optional BlackCoralLocationSharingControl locationSharingControl = 41;
            optional BlackCoralNavigation navigation = 42;
            optional BlackCoralNoteTaker noteTaker = 46;
            optional Notification notification = 6;
            optional RefreshAuthTokenFailed refreshAuthTokenFailed = 36;
            optional RemotePing remotePing = 7;
            optional SendSmsResponse sendSmsResponse = 37;
            optional Settings settings = 25;
            optional BlackCoralShowcase showcase = 49;
            optional BlackCoralSms sms = 38;
            optional SocketCloseResponse socketCloseResponse = 3;
            optional SocketDataChunk socketDataChunk = 4;
            optional SocketError socketError = 19;
            optional SocketOpenResponse socketOpenResponse = 2;
            optional StartExperience startExperience = 27;
            optional StartInputDevicePairing startInputDevicePairing = 10;
            optional State state = 26;
            optional StopExperience stopExperience = 28;
            optional BlackCoralSync sync = 20;
            optional BlackCoralTemplatedSettings templatedSettings = 47;
            optional UnpairInputDevice unpairInputDevice = 12;
            optional BlackCoralUpdate update = 30;
            optional BlackCoralWonderland wonderland = 48;
        
        }
        
        
        message FileChunkRequest {
            required string id = 1;
            required uint32 length = 3;
            required uint32 startByte = 2;
        
        }
        
        
        message BlackCoralShowcase {
            optional GetStories getStories = 3;
            optional StartShowcase startShowcase = 1;
            optional StartStory startStory = 4;
            optional StopShowcase stopShowcase = 2;
            optional StopStory stopStory = 5;
        
        }
        
        
        message CompanionLocationSharingControl {
            optional StartLocationSharing startLocationSharing = 1;
        
        }
        
        
        message FeatureSupportedByCompanion {
            optional bool locationSharing = 1;
        
        }
        
        
        message Sms {
            optional bool hasNonTextAttachments = 6;
            required string id = 1;
            optional bool read = 7;
            required string senderName = 2;
            required string senderNumber = 3;
            required string text = 5;
            required string timestamp = 4;
        
        }
        
        
        enum exitpupilalignment_Direction {
            exitpupilalignment_Direction_LEFT = 1;
            exitpupilalignment_Direction_UP = 2;
            exitpupilalignment_Direction_RIGHT = 4;
            exitpupilalignment_Direction_DOWN = 8;
        }
        
        
        message InputDeviceStatus {
            optional ConnectingMetadata connectingMeta = 4;
            required string name = 1;
            optional RegisteringMetadata registeringMeta = 5;
            optional SearchingMetadata searchingMeta = 3;
            required ConnectionStatus status = 2;
        
                
                enum ConnectionStatus {
                    DISCONNECTED = 0;
                    CONNECTED = 1;
                    SEARCHING = 2;
                    CONNECTING = 3;
                    REGISTERING = 4;
                }
                
        }
        
        
        message State {
            optional Account account = 3;
            optional string companionId = 4;
            optional bool isCalendarEnabled = 5;
            optional bool isNetReachable = 2;
            optional SetAuthToken setAuthToken = 1;
        }
        
        
        message StartLocationSharing {
            required string contextId = 1;
            required uint32 duration = 2;
        
        }
        
        
        message Location {
            optional Position position = 2;
            required Status status = 1;
        
                
                message Position {
                    optional float accuracy = 3;
                    required double latitude = 1;
                    required double longitude = 2;
                    optional string timestamp = 4;
                
                }
                
                
                enum Status {
                    OK = 0;
                    PERMISSION_DENIED = 1;
                    LOCATION_UNAVAILABLE = 2;
                }
                
        }
        
        
        message RefreshAuthTokenFailed {
        
        }
        
        
        message GetHostByNameResponse {
            optional int32 errorCode = 4;
            optional string host = 3;
            required string name = 1;
            required Status status = 2;
        
        }
        
        
        message CalendarEvent {
            optional uint32 attendeeCount = 6;
            repeated string attendeeEmails = 9;
            optional string calendarId = 7;
            required string endDate = 3;
            required string identifier = 1;
            optional bool isAllDay = 10;
            required string location = 5;
            optional uint32 rgbColor = 8;
            required string startDate = 2;
            required string title = 4;
        
        }
        
        
        message RequestTaskSync {
        
        }
        
        
        message RemotePing {
            optional string payload = 1;
        
        }
        
        
        message CompanionClipboard {
            optional ClipText clipText = 1;
        
        }
        
        
        message InputDevicePairingStatusChanged {
            required PairingStatus status = 1;
        
                
                enum PairingStatus {
                    NOT_PAIRED = 0;
                    PAIRING = 1;
                    PAIRED = 2;
                }
                
        }
        
        
        message ContactInfoRequest {
            required string name = 1;
        
        }
        
        
        message RemoveFavouriteContactResponse {
            optional string id = 2;
            required bool success = 1;
        
        }
        
        
        message SocketOpen {
            required string host = 2;
            optional int32 port = 3;
            required int32 streamId = 1;
        
        }
        
        
        message CompanionFavouriteContacts {
            optional AddFavouriteContactResponse addFavouriteContactResponse = 2;
            optional GetFavouriteContactsListResponse favouriteContactsListResponse = 1;
            optional RemoveFavouriteContactResponse removeFavouriteContactResponse = 3;
        
        }
        
        
        message AppAttributes {
            required string bundleId = 1;
            required string name = 2;
        
        }
        
        
        message RequestStatusUpdate {
            optional string contextId = 1;
        
        }
        
        
        message CompanionFeatures {
            optional GetFeatureListResponse featureListResponse = 1;
        
        }
        
        
        message SmsSyncStarted {
        
        }
        
        
        message CompanionFileTransfer {
            optional FileChunkRequest fileChunkRequest = 3;
            optional StartFileTransfer startFileTransfer = 1;
            optional StopFileTransfer stopFileTransfer = 2;
        
        }
        
        
        message EstimateNavigationResponseData {
            optional NavigationEstimateError estimateError = 2;
            optional TripEstimate tripEstimate = 1;
        
                
                enum NavigationEstimateError {
                    OTHER = 0;
                    NO_INTERNET = 1;
                    PERMISSION_DENIED = 2;
                }
                
        }
        
        
        message CompanionExitPupilAlignment {
            optional ExitPupilAlignmentEdge edge = 3;
            optional ExitPupilAlignmentStarted started = 1;
            optional ExitPupilAlignmentStep step = 4;
            optional ExitPupilAlignmentStopped stopped = 2;
        
        }
        
        
        message PlayChime {
        
        }
        
        
        message CompanionCamera {
            optional Image image = 1;
        
        }
        
        
        message ContactInfoResponse {
            repeated ContactInfo contactInfo = 1;
        
        }
        
        
        message Settings {
            optional AppNotificationBlacklist appNotificationBlacklist = 5;
            optional bool autoDetectDriving = 9;
            optional string cloudHost = 1;
            optional NotificationDisplay notificationDisplay = 4;
            optional PlayChime playChime = 7;
            optional bool preferFahrenheit = 8;
            optional SetUiCenterOffset setUiCenterOffset = 3;
            optional bool soundOnRingClick = 2;
            optional float volume = 6;
        
        }
        
        
        message GetCurrentActivityState {
        
        }
        
        
        message BlackCoralFavouriteContacts {
            optional AddFavouriteContact addFavouriteContact = 2;
            optional GetFavouriteContactsList favouriteContactsList = 1;
            optional RemoveFavouriteContact removeFavouriteContact = 3;
        
        }
        
        
        message StartFileTransferResponse {
            optional uint32 checksum = 4;
            required string id = 1;
            optional uint32 length = 3;
            required filetransfer_Status status = 2;
        
        }
        
        
        message Authorize {
            optional string authorizationCode = 2;
            optional string clientId = 4;
            optional string redirectUri = 3;
            required string serviceName = 1;
            optional User user = 5;
        
        }
        
        
        message AddFavouriteContact {
            required FavouriteContactDefinition favouriteContact = 1;
        
        }
        
        
        message GetLocation {
        
        }
        
        
        message BlackCoralUpdate {
            optional CancelUpdate cancelUpdate = 2;
            optional UpdateAvailable updateAvailable = 1;
        
        }
        
        
        message CancelInputDevicePairing {
        
        }
        
        
        message AddFavouriteContactResponse {
            optional FavouriteContact favouriteContact = 2;
            required bool success = 1;
        
        }
        
        
        message ConnectingMetadata {
            optional string friendlyName = 2;
            required string macAddress = 1;
            required string profileVersion = 3;
        
        }
        
        
        message Image {
            optional string fileName = 1;
            optional string suffix = 2;
        
        }
        
        
        message FeatureDefinition {
            optional string description = 4;
            optional bool editable = 6;
            required bool enabled = 3;
            required string id = 1;
            required string name = 2;
            optional bool visible = 5;
        
        }
        
        
        message BlackCoralWonderland {
            optional EnableAllExitPupils enableAllExitPupils = 2;
            optional ExitPupilSelectionConfirmed exitPupilSelectionConfirmed = 3;
            optional ExitPupilSelectionRejected exitPupilSelectionRejected = 4;
            optional SwitchToExitPupil switchToExitPupil = 1;
        
        }
        
        
        message SocketCloseResponse {
            optional int32 errorCode = 3;
            required Status status = 2;
            required int32 streamId = 1;
        
        }
        
        
        message GetSettings {
        
        }
        
        
        message CalendarSyncEnd {
        
        }
        
        
        message StartFileTransfer {
            required string id = 1;
        
        }
        
        
        message User {
            optional string email = 2;
            optional string name = 1;
        
        }
        
        
        message StopNavigationResponse {
        
        }
        
        
        message Calendar {
            optional CalendarData data = 3;
            optional CalendarSyncEnd syncEnd = 2;
            optional CalendarSyncStart syncStart = 1;
        
        }
        
        
        message StopShowcase {
        
        }
        
        
        message AuthorizationStatus {
            required bool authorized = 2;
            required string serviceName = 1;
            optional User user = 3;
        
        }
        
        
        message BlackCoralFileTransfer {
            optional FileChunkResponse fileChunkResponse = 2;
            optional StartFileTransferResponse startFileTransferResponse = 1;
        
        }
        
        
        message Poke {
        
        }
        
        
        message UnpairInputDevice {
        
        }
        
        
        message StartInputDevicePairing {
        
        }
        
        
        message BlackCoralLocation {
            optional Location location = 1;
        
        }
        
        
        message SocketOpenResponse {
            optional int32 errorCode = 3;
            required Status status = 2;
            required int32 streamId = 1;
        
        }
        
        
        message Notification {
            repeated NotificationAction actions = 8;
            optional string appIconFileId = 7;
            optional string appIdentifier = 5;
            optional string appName = 6;
            required string identifier = 1;
            optional bool isSilent = 10;
            optional bool isUpdate = 9;
            optional string previewText = 11;
            required string text = 3;
            required string time = 4;
            required string title = 2;
        
        }
        
        
        message StoryStatus {
            required string contentUri = 1;
            required Status status = 2;
        
                
                enum Status {
                    STARTED = 0;
                    FAILED_TO_START = 1;
                    STOPPED = 2;
                }
                
        }
        
        
        message TaskSyncResponse {
            required int32 taskLimit = 2;
            repeated Task tasks = 1;
        
        }
        
        
        message GetHostByName {
            required string name = 1;
        
        }
        
        
        message CompanionNoteTaker {
            optional TaskSyncResponse taskSyncResponse = 1;
        
        }
        
        
        message AddNote {
            required string text = 1;
        
        }
        
        
        message SetAuthToken {
            optional string authToken = 1;
        
        }
        
        
        enum Status {
            Status_OK = 0;
            Status_ERROR = 1;
        }
        
        
        message Screenshot {
        
        }
        
        
        message StopFileTransfer {
            required string id = 1;
        
        }
        
        
        message SendSms {
            optional string contextId = 3;
            required string recipient = 1;
            required string text = 2;
        
        }
        
        
        message CurrentTime {
            required string time = 1;
            required string timeZone = 2;
        
        }
        
        
        message SocketDataChunk {
            required int32 streamId = 1;
        
        }
        
        
        message BatteryState {
            optional bool isKonaCharging = 3;
            optional int32 konaBatteryLevel = 1;
            optional int32 ringBatteryLevel = 2;
        
        }
        
        
        message BlackCoralNavigation {
            optional EstimateNavigationResponse estimateNavigationResponse = 3;
            optional NavigationStatusUpdate navigationStatusUpdate = 4;
            optional StartNavigationResponse startNavigationResponse = 1;
            optional StopNavigationResponse stopNavigationResponse = 2;
        
        }
        
        
        message ParameterEntry {
            required string key = 1;
            required string value = 2;
        
        }
        
        
        message PerformNotificationAction {
            required string actionKey = 2;
            required string notificationIdentifier = 1;
            repeated RemoteInputResult result = 3;
        
        }
        
        
        message NavigationInfo {
            required Position destination = 2;
            optional NavigationFilter navFilter = 4;
            required NavigationMode navMode = 3;
            optional Position source = 1;
        
                
                enum NavigationFilter {
                    TOLL_ROADS = 0;
                    RESTRICTED_ROADS = 1;
                    FREEWAYS = 2;
                    FERRIES = 3;
                    TUNNELS = 4;
                }
                
                
                enum NavigationMode {
                    DRIVING = 0;
                    CYCLING = 1;
                    WALKING = 2;
                }
                
        }
        
        
        message ExitPupilAlignmentStarted {
            optional uint32 version = 1;
        
        }
        
        
        message CalendarSyncStart {
        
        }
        
        
        message StartStory {
            required string contentUri = 1;
        
        }
        
        
        message RevokeAuthorization {
            required string serviceName = 1;
        
        }
        
        
        message CompanionSync {
            optional AncsDeviceStatus ancsStatus = 2;
            repeated AuthorizationStatus authorizationStatus = 3;
            optional KonaDeviceInformation deviceInfo = 1;
        
        }
        
        
        message TripEstimate {
            required Position destination = 2;
            required int32 distanceToDestination = 4;
            required Position source = 1;
            required int32 timeToDestination = 3;
        
        }
        
        
        message ExitPupilAlignmentEdge {
            required int32 edges = 1;
        
        }
        
        
        message ExitPupilAlignmentStopped {
            optional Result result = 1;
        
                
                enum Result {
                    SUCCESS = 1;
                    FAILURE = 2;
                    CANCEL = 3;
                }
                
        }
        
        
        message SetSettings {
            required string json = 1;
        
        }
        
        
        message FactoryResetResponse {
        
        }
        
        
        message BlackCoralLocationSharingControl {
            optional StartLocationSharingResponse startLocationSharingResponse = 1;
        
        }
        
        
        message CompanionExternalAuthorization {
            optional AuthorizationStatus authorizationStatus = 3;
            optional AuthorizeResponse authorizeResponse = 2;
            optional ProductMetadataResponse productMetadataResponse = 1;
            optional RefreshServiceAccessToken refreshServiceAccessToken = 4;
        
        }
        
        
        message SetUiCenterOffset {
            required int32 xOffset = 1;
            required int32 yOffset = 2;
        
        }
        
        
        message SocketClose {
            required int32 streamId = 1;
        
        }
        
        
        message MarkSmsRead {
            required string id = 1;
        
        }
        
        
        message ChangeExitPupilAlignmentStep {
            required exitpupilalignment_Step step = 1;
        
        }
        
        
        message SearchingMetadata {
            optional uint32 numDevices = 1;
            optional uint32 percentConnectionScore = 2;
        
        }
        
        
        message NotificationAction {
            required string actionIconFileId = 2;
            repeated RemoteInput inputs = 4;
            required string key = 1;
            required string title = 3;
        
        }
        
        
        message BlackCoralNoteTaker {
            optional AddNote addNote = 1;
            optional RequestTaskSync requestTaskSync = 2;
            optional TaskSync taskSyncUpdate = 3;
        
        }
        
        
        message AppNotificationFilter {
            required string appIdentifier = 1;
            required bool notificationsEnabled = 2;
        
        }
        
        
        message SetEnabledFeatures {
            repeated string id = 1;
        
        }
        
        
        message StopExitPupilAlignment {
        
        }
        
        
        message CompanionSms {
            optional ContactInfoRequest contactInfoRequest = 3;
            optional MarkSmsRead markRead = 1;
            optional SyncSms sync = 2;
        
        }
        
        
        message StopNavigation {
        
        }
        
        
        message CalibrateEyeTracking {
            optional Session session = 1;
        
                
                enum Session {
                    CALIBRATION = 0;
                    RECENTER = 1;
                }
                
        }
        
        
        message BlackCoralActivity {
            optional ActivityStateChanged activityStateChanged = 1;
            optional CurrentActivityState currentActivityState = 2;
        
        }
        
        
        message EstimateNavigation {
            optional string contextId = 2;
            required NavigationInfo navigationInfo = 1;
        
        }
        
        
        message SyncSms {
        
        }
        
        
        message AddToAppNotificationBlacklist {
            required string appIdentifier = 1;
            required string appName = 2;
        
        }
        
        
        message BlackCoralExitPupilAlignment {
            optional AcceptExitPupilAlignment accept = 4;
            optional AdjustExitPupilAlignment adjust = 3;
            optional ChangeExitPupilAlignmentStep changeStep = 5;
            optional StartExitPupilAlignment start = 1;
            optional StopExitPupilAlignment stop = 2;
        
        }
        
        
        message GetFavouriteContactsList {
        
        }
        
        
        message CompanionUpdate {
            optional UpdateStatus updateStatus = 1;
        
        }
        
        
        message BlackCoralSms {
            optional ContactInfoResponse contactInfoResponse = 6;
            optional Sms smsReceived = 2;
            optional Sms smsSync = 1;
            optional Sms smsUpdated = 3;
            optional SmsSyncCompleted syncCompleted = 5;
            optional SmsSyncStarted syncStarted = 4;
        
        }
        
        
        message StartNavigationResponse {
            optional string contextId = 2;
            required Result result = 1;
        
                
                enum Result {
                    SUCCESS = 0;
                    FAILURE_NO_INTERNET = 1;
                    FAILURE_PERMISSION_DENIED = 2;
                    FAILURE_OTHER = 3;
                }
                
        }
        
        
        message FavouriteContactDefinition {
            required string name = 1;
            required string phone = 2;
        
        }
        
        
        message HandshakeResponse {
            required uint32 protocolMajorVersion = 3;
            required uint32 protocolMinorVersion = 4;
            required uint32 requiredProtocolMajorVersion = 5;
            required uint32 requiredProtocolMinorVersion = 6;
            required Result result = 1;
            required string softwareVersion = 2;
        
                
                enum Result {
                    SUCCESS = 0;
                    BLACK_CORAL_UPDATE_REQUIRED = 1;
                    COMPANION_UPDATE_REQUIRED = 2;
                }
                
        }
        
        
        message ProductMetadataResponse {
            optional string codeChallenge = 4;
            optional string deviceSerialNumber = 3;
            optional string productId = 2;
            required string serviceName = 1;
        
        }
        
        
        message KonaDeviceInformation {
            required string hardwareVersion = 3;
            required string id = 1;
            required string softwareVersion = 2;
        
        }
        
        
        message StartLocationSharingResponse {
            required string contextId = 2;
            required Result result = 1;
            optional string webAddress = 3;
        
                
                enum Result {
                    SUCCESS = 0;
                    FAILURE = 1;
                }
                
        }
        
        
        message SmsSyncCompleted {
        
        }
        
        
        message UnsubscribeLocationUpdates {
        
        }
        
        
        message GetStories {
        
        }
        
        
        message ExperienceParameter {
            optional string defaultValue = 2;
            required string name = 1;
        
        }
        
        
        message StartExperience {
            required string name = 1;
            repeated ParameterEntry parameters = 2;
        
        }
        
        
        message SubscribeLocationUpdates {
            optional float minimumDistanceDisplacement = 2;
            optional uint32 minimumTimeDelay = 1;
        
        }
        
        
        message CompanionNavigation {
            optional EstimateNavigation estimateNavigation = 3;
            optional StartNavigation startNavigation = 1;
            optional RequestStatusUpdate statusUpdate = 4;
            optional StopNavigation stopNavigation = 2;
        
        }
        
        
        message CalendarData {
            repeated CalendarEvent event = 1;
        
        }
        
        
        message CurrentActivityState {
            repeated ActivityState activityState = 1;
        
        }
        
        
        message RemoteInputResult {
            required string key = 1;
            required string result = 2;
        
        }
        
        
        message StartExitPupilAlignment {
            optional uint32 version = 1;
        
        }
        
        
        message BlackCoralExternalAuthorization {
            optional Authorize authorize = 2;
            optional ProductMetadataRequest productMetadataRequest = 1;
            optional RevokeAuthorization revokeAuthorization = 3;
            optional ServiceAccessToken serviceAccessToken = 4;
        
        }
        
        
        message StopExperience {
            required string name = 1;
        
        }
        
        
        message CompanionActivity {
            optional GetCurrentActivityState getCurrentActivityState = 1;
        
        }
        
        
        message Experience {
            required string name = 1;
            repeated string parameterNames = 2;
            repeated ExperienceParameter parameters = 3;
        
        }
        
        
        message ServiceAccessToken {
            required string bearerToken = 2;
            required string refreshToken = 3;
            optional Result result = 4;
            required string serviceName = 1;
        
                
                enum Result {
                    SUCCESS = 0;
                    FAILURE = 1;
                }
                
        }
        
        
        message GetFeatureList {
        
        }
        
        
        message BlackCoralSync {
            optional FeatureSupportedByCompanion featureSupportedByCompanion = 3;
            optional Settings settings = 1;
            optional State state = 2;
        
        }
        
        
        message TaskSync {
            repeated Task tasks = 1;
        
        }
        
        
        message RefreshAuthToken {
        
        }
        
        
        message FactoryReset {
        
        }
        
        
        message UpdateAvailable {
            required string fileId = 1;
            optional string updateRequirement = 3;
            required string version = 2;
        
        }
        
        
        message ExitPupilSelectionConfirmed {
        
        }
        
        
        message StartNavigation {
            optional string contextId = 2;
            required NavigationInfo navigationInfo = 1;
        
        }
        
        
        message ExitPupilAlignmentStep {
            required exitpupilalignment_Step step = 1;
        
        }
        
